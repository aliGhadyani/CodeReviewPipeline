{
    "Python": {
        "rules": [
            "Follow PEP8",
            "Avoid print() in production, use logging",
            "Ensure proper exception handling",
            "Check for security vulnerabilities (eval, os.system, SQL injection)",
            "Avoid deeply nested loops"
        ]
    },
    "JavaScript": {
        "rules": [
            "Avoid var, use let or const",
            "Ensure ESLint rules are followed",
            "Handle async functions with proper error handling",
            "Detect deeply nested callbacks (callback hell)"
        ]
    },
    "Java": {
        "rules": [
            "Follow CamelCase conventions",
            "Use final where applicable",
            "Ensure proper resource management (use try-with-resources)",
            "Avoid memory leaks (close streams properly)"
        ]
    },
    "C++": {
      "rules": [
        "### General Best Practices",
        "Use PascalCase for class names and snake_case for variables/functions.",
        "Use smart pointers (std::unique_ptr, std::shared_ptr) instead of raw pointers.",
        "Follow the Rule of Five (copy constructor, move constructor, copy assignment, move assignment, destructor).",
        "Use noexcept for functions that do not throw exceptions.",
        "Avoid global variables and magic numbers; use constants or enums instead.",
        "Use constexpr for compile-time constants.",
        "Prefer std::vector over raw arrays for dynamic allocations.",
        "Use std::move() and std::forward() when transferring ownership of objects.",
        "Minimize header file dependencies using forward declarations where possible.",
        "### Memory Management",
        "Use RAII to manage resources and avoid memory leaks.",
        "Avoid raw pointers and prefer std::make_unique<T>() and std::make_shared<T>().",
        "Always delete[] when using new[].",
        "Ensure dynamic memory allocation has a corresponding deallocation.",
        "Use ExAllocatePoolWithTag() instead of ExAllocatePool() in Windows Drivers.",
        "### Common C++ Mistakes",
        "Check all return values from functions, especially system calls.",
        "Avoid undefined behavior by ensuring proper pointer usage.",
        "Use explicit keyword for single-argument constructors to prevent implicit conversions.",
        "Avoid uninitialized variables; always initialize them before use.",
        "Prefer auto when the type is obvious from the right-hand side.",
        "Avoid C-style casts; use static_cast, dynamic_cast, or reinterpret_cast where necessary.",
        "Do not use malloc() and free() in C++; prefer new/delete or smart pointers.",
        "Use nullptr instead of NULL for better type safety.",
        "### Performance Optimization",
        "Use references or pointers instead of passing large objects by value.",
        "Use const references for function arguments to avoid unnecessary copies.",
        "Use inline functions for small, frequently called functions.",
        "Use move semantics to avoid unnecessary deep copies.",
        "Avoid expensive operations inside loops.",
        "Use preallocated memory pools where applicable.",
        "Minimize the use of virtual functions where performance is critical.",
        "### Multithreading & Concurrency",
        "Use std::thread and std::mutex instead of raw pthreads.",
        "Always lock shared resources using std::lock_guard or std::unique_lock.",
        "Use std::atomic for variables accessed by multiple threads.",
        "Avoid data races by minimizing shared mutable state.",
        "Prefer std::condition_variable over busy waiting.",
        "Use thread pools instead of creating/destroying threads dynamically.",
        "### Windows API Best Practices",
        "Use HeapAlloc() and HeapFree() instead of malloc() and free().",
        "Use VirtualAlloc() for large memory allocations.",
        "Always close handles after CreateProcess() or CreateThread().",
        "Use Secure APIs (StringCchCopy() instead of strcpy()).",
        "Validate all user inputs to prevent buffer overflows.",
        "Avoid blocking calls like Sleep() in performance-critical code.",
        "Use WaitForSingleObject() or WaitForMultipleObjects() instead of busy waiting.",
        "Avoid hardcoded secrets (use environment variables or credential stores).",
        "### COM (Component Object Model) Best Practices",
        "Always call CoInitialize() or CoInitializeEx() before using COM APIs.",
        "Use CComPtr<> instead of raw COM pointers to manage reference counting.",
        "Release COM objects explicitly using Release() or smart pointers.",
        "Check HRESULT return values and handle errors properly.",
        "Use ATL smart classes (CComPtr, CComBSTR, CComVariant) to simplify COM object management.",
        "Avoid circular references in COM objects (use weak references if needed).",
        "Ensure COM interface pointers are NULL after Release() to avoid dangling pointers.",
        "### ATL (Active Template Library) Best Practices",
        "Use CComPtr<> and CComBSTR for automatic reference management.",
        "Use ATL_NO_VTABLE macro for COM interfaces to reduce vtable size.",
        "Use ATLASSERT() instead of assert() for better debugging.",
        "Use ATL::CComVariant instead of VARIANT to manage variant types safely.",
        "Prefer CComObject<> over raw COM object creation.",
        "Avoid using raw COM interfaces directly, wrap them with CComPtr<>.",
        "### Windows Driver Best Practices",
        "Use KMDF or UMDF instead of writing raw WDM drivers when possible.",
        "Always check return values from ZwCreateFile(), ZwReadFile(), and other kernel APIs.",
        "Use structured exception handling (SEH) to handle driver crashes gracefully.",
        "Avoid blocking calls in DriverEntry() or IRP_MJ_CREATE handlers.",
        "Use IoCompleteRequest() correctly to return IRPs to the OS.",
        "Ensure proper IRQL handling (DISPATCH_LEVEL, PASSIVE_LEVEL, etc.).",
        "Avoid memory leaks by freeing allocated memory in DriverUnload().",
        "Always use ExAllocatePoolWithTag() instead of ExAllocatePool() to aid debugging.",
        "### WinForms (C++/CLI) Best Practices",
        "Use managed pointers (gcnew) instead of raw pointers.",
        "Use System::String^ instead of char* or std::string.",
        "Dispose() objects explicitly when no longer needed to free resources.",
        "Use try/catch blocks around UI event handlers to prevent application crashes.",
        "Use BackgroundWorker or async/await for long-running UI tasks.",
        "Avoid memory leaks by ensuring IDisposable objects are disposed properly.",
        "Use System::Diagnostics::Debug::WriteLine() instead of printf() for debugging.",
        "### Debugging & Logging Best Practices",
        "Use OutputDebugString() instead of printf() for Windows debugging.",
        "Use structured logging frameworks like spdlog or Windows Event Log.",
        "Enable compiler warnings and treat them as errors.",
        "Use asserts to catch errors during development.",
        "Always enable AddressSanitizer and Valgrind for memory leak detection."
      ]
    }
}
