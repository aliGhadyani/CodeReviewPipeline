{
    "C++": {
      "Memory Safety": [
        "Use RAII to manage resources and avoid memory leaks.",
        "Avoid raw pointers; prefer smart pointers (std::unique_ptr, std::shared_ptr).",
        "Ensure every allocation has a corresponding deallocation (delete[] when using new[]).",
        "Prefer std::make_unique and std::make_shared over direct use of new."
      ],
      "Syntax": [
        "Follow PascalCase for class names and snake_case for variables/functions.",
        "Avoid C-style casts; use static_cast, dynamic_cast, or reinterpret_cast.",
        "Use the explicit keyword for single-argument constructors to prevent implicit conversions.",
        "Prefer auto when the type is obvious."
      ],
      "Security": [
        "Validate all user inputs to prevent buffer overflows.",
        "Use secure functions (e.g., StringCchCopy, snprintf) instead of unsafe ones (strcpy, sprintf).",
        "Avoid hardcoding secrets; use environment variables or secure credential stores.",
        "Check all return values and error codes."
      ],
      "Performance": [
        "Use const references to avoid unnecessary copying of large objects.",
        "Prefer std::move() and std::forward() to avoid expensive deep copies.",
        "Minimize the use of virtual functions in performance-critical code.",
        "Avoid expensive operations inside loops."
      ],
      "Style": [
        "every local variable name in each scope must start with `_` and use camel case",
        "every private class member variable must start with `m_` and use camel case",
        "every global variable must start with `g_` and use camel case"
      ]
    }
  }
  